// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  email       String?       @unique
  phone       Int?          @unique
  name        String?
  password    String
  createdAt   DateTime      @default(now())
  createdBy   Int?
  role        String?       @default("user")
  Client      Client?
  Employee    Employee[]
  Transaction Transaction[]
}

model Client {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  kycok     Boolean?   @default(false)
  wallet    String?
  createdBy Int        @default(1)
  isActive  Boolean?   @default(true)
  createdAt DateTime   @default(now())
  Employee  Employee[]
}

model Employee {
  id              Int      @id @default(autoincrement())
  designation     String?
  functionalTitle String?
  wallet          String?
  salary          Int
  allowances      Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  createdBy       Int      @default(1)
  updatedBy       Int      @default(1)
  isActive        Boolean? @default(true)
  clientId        Int
  client          Client   @relation(fields: [clientId], references: [id])
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id             Int      @id @default(autoincrement())
  senderUserId   Int
  receiverUserId Int
  senderWallet   String?
  receiverWallet String?
  amount         Decimal @db.Decimal(15, 6)
  currency       String   @default("SOL")
  signature      String
  createdAt      DateTime @default(now())
  createdBy      Int
  User           User?    @relation(fields: [userId], references: [id])
  userId         Int?
}

model PaymentSchedule {
  id        Int      @id @default(autoincrement())
  sender    String?
  receiver  String?
  amount    String?
  currency  String?
  status    String?
  createdAt DateTime @default(now())
  isActive  Boolean? @default(true)
}

model Event {
  id          Int      @id @default(autoincrement())
  type        String
  title       String
  description String?
  date        DateTime
  time        String
  createdAt   DateTime @default(now())
  createdBy   Int
}

model Token {
  id            Int      @id @default(autoincrement())
  token         String
  name          String
  symbol        String
  description   String
  image         String?
  initSupply    Int
  mintAuthority String
  createdAt     DateTime @default(now())
  createdBy     Int
  isActive      Boolean? @default(true)
}

enum EventType {
  SalaryPayment
  BonusPayment
}

enum AuthType {
  Google
  Github
}

enum UseRoles {
  Admin
  ClientAdmin
  ClientUser
  Employee
}
